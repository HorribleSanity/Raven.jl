var documenterSearchIndex = {"docs":
[{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"reference/#API-reference","page":"Reference","title":"API reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"CurrentModule = Raven","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [Raven]","category":"page"},{"location":"reference/#Raven.constructorof","page":"Reference","title":"Raven.constructorof","text":"constructorof(T::Type) -> constructor\n\nReturn an object constructor that can be used to construct objects of type T from their field values. Typically, constructor will be the type T with all parameters removed:\n\njulia> struct T{A,B}\n           a::A\n           b::B\n       end\n\njulia> Raven.constructorof(T{Int,Int})\nT\n\n\nThe returned constructor is used to unflatten objects hierarchical types from a list of their values. For example, in this case T(1,2) constructs an object where T.a==1 an T.b==2.\n\nThe method constructorof should be defined for types that are not constructed from a tuple of their values.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Raven.flatten-Union{Tuple{U}, Tuple{T}, Tuple{T, Type{U}}} where {T, U}","page":"Reference","title":"Raven.flatten","text":"flatten(obj, use=Real)\n\nFlattens a hierarchical type to a tuple with elements of type use.\n\nExamples\n\njulia> flatten((a=(Complex(1, 2), 3), b=4))\n(1, 2, 3, 4)\n\n\nTo convert the tuple to a vector, simply use [flatten(x)...], or using static arrays to avoid allocations: SVector(flatten(x)).\n\n\n\n\n\n","category":"method"},{"location":"reference/#Raven.get_backend-Tuple{Any}","page":"Reference","title":"Raven.get_backend","text":"get_backend(::Type{T}) -> Type\n\nReturns the KernelAbstractions backend to use with kernels where A is an argument.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Raven.materializequadranttoglobalid-Tuple{Any, Any}","page":"Reference","title":"Raven.materializequadranttoglobalid","text":"materializequadranttoglobalid(forest, ghost)\n\nGenerate the global ids for quadrants in the forest and the ghost layer.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Raven.numbercontiguous-Union{Tuple{T}, Tuple{Type{T}, Any}} where T","page":"Reference","title":"Raven.numbercontiguous","text":"numbercontiguous(T, A; by = identity)\n\nRenumbers A contiguously in an Array{T} and returns it. The function by is a mapping for the elements of A used during element comparison, similar to sort.\n\nExamples\n\njulia> Raven.numbercontiguous(Int32, [13, 4, 5, 1, 5])\n5-element Vector{Int32}:\n 4\n 2\n 3\n 1\n 3\n\njulia> Raven.numbercontiguous(Int32, [13, 4, 5, 1, 5]; by = x->-x)\n5-element Vector{Int32}:\n 1\n 3\n 2\n 4\n 2\n\n\n\n\n\n","category":"method"},{"location":"reference/#Raven.parenttype-Tuple{Any}","page":"Reference","title":"Raven.parenttype","text":"parent_type(::Type{T}) -> Type\n\nReturns the parent array that type T wraps.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Raven.pin-Tuple{Type, Array}","page":"Reference","title":"Raven.pin","text":"pin(T::Type, A::Array)\n\nPins the host array A for copying to arrays of type T\n\n\n\n\n\n","category":"method"},{"location":"reference/#Raven.unflatten","page":"Reference","title":"Raven.unflatten","text":"unflatten(T::Type, data, use::Type=Real)\n\nConstruct an object from Tuple or Vector data and a Type T. The data should be at least as long as the queried fields (of type use) in T.\n\nExamples\n\njulia> unflatten(Tuple{Tuple{Int,Int},Complex{Int,Int}}, (1, 2, 3, 4))\n((1, 2), 3 + 4im)\n\n\n\n\n\n\n","category":"function"},{"location":"#Raven-ð“…‚","page":"Home","title":"Raven ð“…‚","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Raven is a toolbox for adapted discontinuous spectral element discretizations of partial differential equations that supports execution on distributed manycore devices (via KernelAbstractions and MPI).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Some of our previous efforts in this area resulted in Canary, Bennu, and Atum.","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Contributions are encouraged. If there are additional features you would like to use, please open an issue or pull request.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Additional examples and documentation improvements are also welcome.","category":"page"},{"location":"refindex/#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"refindex/","page":"Index","title":"Index","text":"","category":"page"}]
}
